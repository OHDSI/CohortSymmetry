[{"path":"https://ohdsi.github.io/CohortSymmetry/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://ohdsi.github.io/CohortSymmetry/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://ohdsi.github.io/CohortSymmetry/articles/a01_Introduction.html","id":"as-a-diagram","dir":"Articles","previous_headings":"","what":"As a diagram","title":"Introduction to CohortSymmetry","text":"Diagrammatically, work flow using CohortSymmetry resembles following flow chat:","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/articles/a02_Generate_a_sequence_cohort.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Step 1. Generate a sequence cohort","text":"vignette explore functionalities generateSequenceCohort().","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/articles/a02_Generate_a_sequence_cohort.html","id":"create-a-cdm-object","dir":"Articles","previous_headings":"Introduction","what":"Create a cdm object","title":"Step 1. Generate a sequence cohort","text":"CohortSymmetry package designed work data mapped OMOP, first step create reference data using CDMConnector package. use Eunomia dataset subsequent examples.","code":"library(CDMConnector) library(dplyr) library(DBI) library(CohortSymmetry) library(duckdb)  db <- DBI::dbConnect(duckdb::duckdb(),                       dbdir = CDMConnector::eunomiaDir()) cdm <- cdmFromCon(   con = db,   cdmSchema = \"main\",   writeSchema = \"main\" )"},{"path":"https://ohdsi.github.io/CohortSymmetry/articles/a02_Generate_a_sequence_cohort.html","id":"instantiate-two-cohorts-in-the-cdm-reference","dir":"Articles","previous_headings":"Introduction","what":"Instantiate two cohorts in the cdm reference","title":"Step 1. Generate a sequence cohort","text":"CohortSymmetry package requires cdm object contains two cohort tables: index cohort marker cohort. lot different ways create cohorts, depend index cohort marker cohort represent. , use DrugUtilisation package generate two drug cohorts cdm object. illustrative purposes, carry SSA aspirin (index_cohort) acetaminophen (marker_cohort).","code":"library(DrugUtilisation) cdm <- DrugUtilisation::generateIngredientCohortSet(   cdm = cdm,   name = \"aspirin\",   ingredient = \"aspirin\")  cdm <- DrugUtilisation::generateIngredientCohortSet(   cdm = cdm,   name = \"acetaminophen\",   ingredient = \"acetaminophen\")"},{"path":"https://ohdsi.github.io/CohortSymmetry/articles/a02_Generate_a_sequence_cohort.html","id":"generate-a-sequence-cohort","dir":"Articles","previous_headings":"","what":"Generate a sequence cohort","title":"Step 1. Generate a sequence cohort","text":"order initiate calculations, two cohorts tables need intersected using generateSequenceCohortSet(). process output individuals appear tables subject different parameters. parameter corresponds specific requirement. parameters function include cohortDateRange, daysPriorObservation, washoutWindow, indexMarkerGap combinationWindow. Let’s go examples see parameter works.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/articles/a02_Generate_a_sequence_cohort.html","id":"no-specific-requirements","dir":"Articles","previous_headings":"Generate a sequence cohort","what":"No specific requirements","title":"Step 1. Generate a sequence cohort","text":"Let’s study simplest case requirements imposed. See figure see example analysis containing six different participants.  See first event/episode (index marker) included analysis. restriction criteria individuals episode index marker cohort, subjects included analysis. can get sequence cohort without including particular requirement like :","code":"cdm <- generateSequenceCohortSet(   cdm = cdm,   indexTable = \"aspirin\",   markerTable = \"acetaminophen\",   name = \"intersect\",   cohortDateRange = as.Date(c(NA, NA)), #default   daysPriorObservation = 0, #default   washoutWindow = 0, #default   indexMarkerGap = Inf, #default   combinationWindow = c(0,Inf)) # default  cdm$intersect |>    dplyr::glimpse() #> Rows: ?? #> Columns: 6 #> Database: DuckDB v1.2.0 [unknown@Linux 6.8.0-1021-azure:R 4.4.3//tmp/Rtmpig3yjg/file1e6568cd0a09.duckdb] #> $ cohort_definition_id <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… #> $ subject_id           <int> 16, 42, 35, 2, 49, 11, 32, 43, 12, 7, 17, 63, 30,… #> $ cohort_start_date    <date> 1972-04-10, 1914-07-09, 1960-06-20, 1920-07-01, … #> $ cohort_end_date      <date> 1974-06-11, 1937-09-07, 1993-04-28, 1931-09-03, … #> $ index_date           <date> 1972-04-10, 1914-07-09, 1993-04-28, 1920-07-01, … #> $ marker_date          <date> 1974-06-11, 1937-09-07, 1960-06-20, 1931-09-03, …"},{"path":"https://ohdsi.github.io/CohortSymmetry/articles/a02_Generate_a_sequence_cohort.html","id":"important-observations","dir":"Articles","previous_headings":"Generate a sequence cohort > No specific requirements","what":"Important Observations","title":"Step 1. Generate a sequence cohort","text":"See generated table format OMOP CDM cohort, also includes two additional columns: index_date marker_date, cohort_start_date index marker episode respectively. cohort_start_date cohort_end_date defined : cohort_start_date: earliest cohort_start_date index marker events. cohort_end_date: latest cohort_start_date index marker events. cohort_definition_id output associated cohort_definition_id} index table (indexId) cohort_definition_id marker table (markerId). see correspondence, one following: user may also wish subset index table marker table based cohort_definition_id using indexId markerId respectively. example, following code includes cohort_definidtion_id =1= 1 index marker table.","code":"attr(cdm$intersect, \"cohort_set\") #> # Source:   table<intersect_set> [?? x 13] #> # Database: DuckDB v1.2.0 [unknown@Linux 6.8.0-1021-azure:R 4.4.3//tmp/Rtmpig3yjg/file1e6568cd0a09.duckdb] #>   cohort_definition_id cohort_name     index_id index_name marker_id marker_name #>                  <int> <chr>              <int> <chr>          <int> <chr>       #> 1                    1 index_aspirin_…        1 aspirin            1 acetaminop… #> # ℹ 7 more variables: cohort_date_range <chr>, days_prior_observation <chr>, #> #   washout_window <chr>, index_marker_gap <chr>, combination_window <chr>, #> #   moving_average_restriction <chr>, nsr <dbl> cdm <- generateSequenceCohortSet(   cdm = cdm,   indexTable = \"aspirin\",   markerTable = \"acetaminophen\",   name = \"intersect\",   cohortDateRange = as.Date(c(NA, NA)),   indexId = 1,   markerId = 1,   daysPriorObservation = 0,   washoutWindow = 0,   indexMarkerGap = NULL,   combinationWindow = c(0,Inf))"},{"path":"https://ohdsi.github.io/CohortSymmetry/articles/a02_Generate_a_sequence_cohort.html","id":"specified-study-period","dir":"Articles","previous_headings":"Generate a sequence cohort","what":"Specified study period","title":"Step 1. Generate a sequence cohort","text":"can restrict study period analysis include episodes events happening specific period time. See figure see example analysis containing six different participants.  Notice , imposing restriction study period, participants might excluded. example, participant 4 excluded index episode outside study period whereas participant 6 included /index episode within study period. study period can restricted using cohortDateRange argument, defined : cohortDateRange = c(start_of_the_study_period, end_of_the_study_period) See example usage , restricted cohortDateRange within 01/01/1950 01/01/1969.","code":"cdm <- generateSequenceCohortSet(   cdm = cdm,   indexTable = \"aspirin\",   markerTable = \"acetaminophen\",   name = \"intersect_study_period\",   cohortDateRange = as.Date(c(\"1950-01-01\",\"1969-01-01\")))"},{"path":"https://ohdsi.github.io/CohortSymmetry/articles/a02_Generate_a_sequence_cohort.html","id":"specified-study-period-and-prior-history-requirement","dir":"Articles","previous_headings":"Generate a sequence cohort","what":"Specified study period and prior history requirement","title":"Step 1. Generate a sequence cohort","text":"can also specify minimum prior history individual start first event. Individuals enough prior history excluded. See figure , imagine prior observation history set 31 days, participant 5 excluded first event happening within study period (equal ) 31 days prior history: number days prior history required can implemented using argument daysPriorObservation. See example :","code":"cdm <- generateSequenceCohortSet(    cdm = cdm,    indexTable = \"aspirin\",    markerTable = \"acetaminophen\",    name = \"intersect_prior_obs\",    cohortDateRange = as.Date(c(\"1950-01-01\",\"1969-01-01\")),    daysPriorObservation = 365)"},{"path":"https://ohdsi.github.io/CohortSymmetry/articles/a02_Generate_a_sequence_cohort.html","id":"specified-study-period-prior-history-requirement-and-washout-period","dir":"Articles","previous_headings":"Generate a sequence cohort","what":"Specified study period, prior history requirement and washout period","title":"Step 1. Generate a sequence cohort","text":"can also specify minimum washout period required event episode included. following figure, exclude participant 6 another episode took place within washout period. Washout period applied index marker respectively. functionality can implemented using washoutWindow argument. See example :","code":"cdm <- generateSequenceCohortSet(   cdm = cdm,   indexTable = \"aspirin\",   markerTable = \"acetaminophen\",   name = \"intersect_washout\",   cohortDateRange = as.Date(c(\"1950-01-01\",\"1969-01-01\")),   daysPriorObservation = 365,   washoutWindow = 365)"},{"path":"https://ohdsi.github.io/CohortSymmetry/articles/a02_Generate_a_sequence_cohort.html","id":"specified-study-period-prior-history-requirement-and-combination-window","dir":"Articles","previous_headings":"Generate a sequence cohort","what":"Specified study period, prior history requirement and combination window","title":"Step 1. Generate a sequence cohort","text":"define combination window minimum maximum days start first event (either index marker) start next event. words: x=x =second_episode(start_date) −-first_episode(start_date); combinationWindow[1] <x≤< x \\leqcombinationWindow[2] generateSequenceCohortSet() function, implemented using combinationWindow argument. Notice previous examples, want combination window requirement, set argument combinationWindow = c(0,Inf), default combinationWindow = c(0, 365). following example, explore subject_id 80 187 see functionality argument. using restriction combination window, included intersect_changed_cw cohort:","code":"cdm <- generateSequenceCohortSet(    cdm = cdm,    indexTable = \"aspirin\",    markerTable = \"acetaminophen\",    name = \"intersect_changed_cw\",    cohortDateRange = as.Date(c(\"1950-01-01\",\"1969-01-01\")),    daysPriorObservation = 365,    combinationWindow = c(0, Inf))   cdm$intersect_changed_cw |>    dplyr::filter(subject_id %in% c(80,187)) |>    dplyr::mutate(combinationWindow = pmax(index_date, marker_date) - pmin(index_date, marker_date))"},{"path":"https://ohdsi.github.io/CohortSymmetry/articles/a02_Generate_a_sequence_cohort.html","id":"specified-study-period-prior-history-requirement-and-index-marker-gap","dir":"Articles","previous_headings":"Generate a sequence cohort","what":"Specified study period, prior history requirement and index marker gap","title":"Step 1. Generate a sequence cohort","text":"define index-marker gap refer maximum number days start second episode end first episode. means: x=x =second_episode(cohort_start_date) −-first_episode(cohort_end_date); x ≤\\leqindexMarkerGap See example , participants index-marker gap higher 30 days excluded analysis (participant 2, 3 6): Use indexGap argument impose restriction, example:","code":"cdm <- generateSequenceCohortSet(   cdm = cdm,   indexTable = \"aspirin\",   markerTable = \"acetaminophen\",   name = \"intersect_\",   cohortDateRange = as.Date(c(\"1950-01-01\",\"1969-01-01\")),   daysPriorObservation = 365,   indexMarkerGap = 7) CDMConnector::cdmDisconnect(cdm = cdm)"},{"path":"https://ohdsi.github.io/CohortSymmetry/articles/a03_Summarise_sequence_ratios.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Step 2. Obtain the sequence ratios","text":"vignette explore functionality arguments summariseSequenceRatios() function, used generate sequence ratios SSA. function uses output generateSequenceCohortSet() function (explained detail vignette: Step 1. Generate sequence cohort), pick explanation left previous vignette. Recall previous vignette: Step 1. Generate sequence cohort, ’ve generated cdm$aspirin cdm$acetaminophen using generate cdm$intersect like :","code":"# Generate a sequence cohort cdm <- generateSequenceCohortSet(   cdm = cdm,   indexTable = \"aspirin\",   markerTable = \"acetaminophen\",   name = \"intersect\",   combinationWindow = c(0,Inf))"},{"path":"https://ohdsi.github.io/CohortSymmetry/articles/a03_Summarise_sequence_ratios.html","id":"obtain-sequence-ratios","dir":"Articles","previous_headings":"","what":"Obtain sequence ratios","title":"Step 2. Obtain the sequence ratios","text":"One can obtain crude adjusted sequence ratios (corresponding confidence intervals) using summariseSequenceRatios() function: obtained output summarised result format. later vignette (Step 3. Visualise results) explore visualise results intuitive way.","code":"summariseSequenceRatios(   cohort = cdm$intersect ) |>    dplyr::glimpse() #> Rows: 10 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 #> $ cdm_name         <chr> \"Synthea\", \"Synthea\", \"Synthea\", \"Synthea\", \"Synthea\"… #> $ group_name       <chr> \"index_cohort_name &&& marker_cohort_name\", \"index_co… #> $ group_level      <chr> \"aspirin &&& acetaminophen\", \"aspirin &&& acetaminoph… #> $ strata_name      <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ strata_level     <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ variable_name    <chr> \"crude\", \"adjusted\", \"crude\", \"crude\", \"adjusted\", \"a… #> $ variable_level   <chr> \"sequence_ratio\", \"sequence_ratio\", \"sequence_ratio\",… #> $ estimate_name    <chr> \"point_estimate\", \"point_estimate\", \"lower_CI\", \"uppe… #> $ estimate_type    <chr> \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\"… #> $ estimate_value   <chr> \"1.8108504398827\", \"1.75565565833452\", \"1.64970963817… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… CDMConnector::cdmDisconnect(cdm = cdm)"},{"path":"https://ohdsi.github.io/CohortSymmetry/articles/a04_Visualise_sequence_ratios.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Step 3. Visualise the sequence ratios","text":"vignette explore functionality arguments set functions help us understand visualise sequence ratio results. particular, delve following functions: tableSequenceRatios(): generate table summarising results. plotSequenceRatios(): plot sequence ratios. function builds-previous functions, generateSequenceCohortSet() summariseSequenceRatios() function (explained detail previous vignettes: Step 1. Generate sequence cohort Step 2. Obtain sequence ratios respectively). Hence, pick explanation left previous vignette. Recall table intersect cdm reference results sequence ratio produced follows (Step 2. Obtain sequence ratios):","code":"result <- summariseSequenceRatios(cohort = cdm$intersect)"},{"path":"https://ohdsi.github.io/CohortSymmetry/articles/a04_Visualise_sequence_ratios.html","id":"table-output-of-the-sequence-ratio-results","dir":"Articles","previous_headings":"","what":"Table output of the sequence ratio results","title":"Step 3. Visualise the sequence ratios","text":"function tableSequenceRatios inputs result summariseSequenceRatios, default outputs gt table.","code":"tableSequenceRatios(result = result)"},{"path":"https://ohdsi.github.io/CohortSymmetry/articles/a04_Visualise_sequence_ratios.html","id":"modify-type","dir":"Articles","previous_headings":"Table output of the sequence ratio results","what":"Modify type","title":"Step 3. Visualise the sequence ratios","text":"Instead gt table, user may also want put sequence ratio results flex table format (rest arguments saw gt table also applies ): tibble:","code":"tableSequenceRatios(result = result,                     type = \"flextable\") tableSequenceRatios(result = result,                     type = \"tibble\")"},{"path":"https://ohdsi.github.io/CohortSymmetry/articles/a04_Visualise_sequence_ratios.html","id":"plot-output-of-the-sequence-ratio-results","dir":"Articles","previous_headings":"","what":"Plot output of the sequence ratio results","title":"Step 3. Visualise the sequence ratios","text":"Similarly, also plotSequenceRatios() visualise results.  default, plots adjusted sequence ratios (CIs) crude sequence ratios (CIs). One may wish plot adjusted one like (note since adjusted plotted, one colour needs specified):","code":"plotSequenceRatios(result = result)"},{"path":"https://ohdsi.github.io/CohortSymmetry/articles/a04_Visualise_sequence_ratios.html","id":"modify-onlyasr-and-colours","dir":"Articles","previous_headings":"Plot output of the sequence ratio results","what":"Modify onlyASR and colours","title":"Step 3. Visualise the sequence ratios","text":"One change colour like :","code":"plotSequenceRatios(result = result,                    onlyASR = T,                    colours = \"black\") plotSequenceRatios(result = result,                    onlyASR = T,                    colours = \"red\") CDMConnector::cdmDisconnect(cdm = cdm)"},{"path":"https://ohdsi.github.io/CohortSymmetry/articles/a05_Summarise_temporal_symmetry.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Step 4: Obtain aggregated data on temporal symmetry","text":"vignette explore functionality arguments summariseTemporalSymmetry() function. function uses cdm$intersect introduced previous vignette Step 1. Generate sequence cohort produce aggregated statistics containing frequency different time gaps initiation marker initiation index (marker_date −-index_date). work function best illustrated via example. Recall previous vignette, ’ve used cdm$aspirin cdm$acetaminophen generate cdm$intersect like :","code":"# Generate a sequence cohort cdm <- generateSequenceCohortSet(   cdm = cdm,   indexTable = \"aspirin\",   markerTable = \"acetaminophen\",   name = \"intersect\",   combinationWindow = c(0,Inf))"},{"path":"https://ohdsi.github.io/CohortSymmetry/articles/a05_Summarise_temporal_symmetry.html","id":"obtaining-temporal-symmetry","dir":"Articles","previous_headings":"","what":"Obtaining temporal symmetry","title":"Step 4: Obtain aggregated data on temporal symmetry","text":"default unit difference two initiations measured months. example, first row showing 66 cases index happening marker gap 2929 months whereas second row showing 77 cases index happening marker gap 4040 months.","code":"summariseTemporalSymmetry(cohort = cdm$intersect) |>    dplyr::glimpse() #> Rows: 558 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"Synthea\", \"Synthea\", \"Synthea\", \"Synthea\", \"Synthea\"… #> $ group_name       <chr> \"index_name &&& marker_name\", \"index_name &&& marker_… #> $ group_level      <chr> \"aspirin &&& acetaminophen\", \"aspirin &&& acetaminoph… #> $ strata_name      <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ strata_level     <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ variable_name    <chr> \"temporal_symmetry\", \"temporal_symmetry\", \"temporal_s… #> $ variable_level   <chr> \"206\", \"335\", \"503\", \"-163\", \"419\", \"-271\", \"349\", \"-… #> $ estimate_name    <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\",… #> $ estimate_type    <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\"… #> $ estimate_value   <chr> \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\"… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"…"},{"path":"https://ohdsi.github.io/CohortSymmetry/articles/a05_Summarise_temporal_symmetry.html","id":"modify-the-cohort-based-on-cohort_definition_id","dir":"Articles","previous_headings":"Obtaining temporal symmetry","what":"Modify the cohort based on cohort_definition_id","title":"Step 4: Obtain aggregated data on temporal symmetry","text":"parameter used subset cohort table inputted summariseTemporalSymmetry(). Imagine user wants include cohort_definition_id =1= 1 cdm$intersect summariseTemporalSymmetry(), one following: course nothing every entry cdm$intersect cohort_definition_id =1= 1.","code":"summariseTemporalSymmetry(cohort = cdm$intersect,                           cohortId = 1) |>    dplyr::glimpse() #> Rows: 558 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"Synthea\", \"Synthea\", \"Synthea\", \"Synthea\", \"Synthea\"… #> $ group_name       <chr> \"index_name &&& marker_name\", \"index_name &&& marker_… #> $ group_level      <chr> \"aspirin &&& acetaminophen\", \"aspirin &&& acetaminoph… #> $ strata_name      <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ strata_level     <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ variable_name    <chr> \"temporal_symmetry\", \"temporal_symmetry\", \"temporal_s… #> $ variable_level   <chr> \"187\", \"-229\", \"456\", \"-61\", \"-174\", \"342\", \"306\", \"5… #> $ estimate_name    <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\",… #> $ estimate_type    <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\"… #> $ estimate_value   <chr> \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\"… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"…"},{"path":"https://ohdsi.github.io/CohortSymmetry/articles/a05_Summarise_temporal_symmetry.html","id":"modify-timescale","dir":"Articles","previous_headings":"Obtaining temporal symmetry","what":"Modify timescale","title":"Step 4: Obtain aggregated data on temporal symmetry","text":"Recall default timescale month, one also change either day year.","code":"summariseTemporalSymmetry(cohort = cdm$intersect,                           timescale = \"day\") |>    dplyr::glimpse() #> Rows: 1,350 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"Synthea\", \"Synthea\", \"Synthea\", \"Synthea\", \"Synthea\"… #> $ group_name       <chr> \"index_name &&& marker_name\", \"index_name &&& marker_… #> $ group_level      <chr> \"aspirin &&& acetaminophen\", \"aspirin &&& acetaminoph… #> $ strata_name      <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ strata_level     <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ variable_name    <chr> \"temporal_symmetry\", \"temporal_symmetry\", \"temporal_s… #> $ variable_level   <chr> \"482\", \"-1139\", \"912\", \"1784\", \"253\", \"3901\", \"-3268\"… #> $ estimate_name    <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\",… #> $ estimate_type    <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\"… #> $ estimate_value   <chr> \"5\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\"… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… summariseTemporalSymmetry(cohort = cdm$intersect,                           timescale = \"year\") |>    dplyr::glimpse() #> Rows: 94 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"Synthea\", \"Synthea\", \"Synthea\", \"Synthea\", \"Synthea\"… #> $ group_name       <chr> \"index_name &&& marker_name\", \"index_name &&& marker_… #> $ group_level      <chr> \"aspirin &&& acetaminophen\", \"aspirin &&& acetaminoph… #> $ strata_name      <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ strata_level     <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ variable_name    <chr> \"temporal_symmetry\", \"temporal_symmetry\", \"temporal_s… #> $ variable_level   <chr> \"-49\", \"57\", \"-17\", \"-42\", \"30\", \"-25\", \"-12\", \"16\", … #> $ estimate_name    <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\",… #> $ estimate_type    <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\"… #> $ estimate_value   <chr> \"-\", \"-\", \"5\", \"-\", \"11\", \"-\", \"16\", \"11\", \"33\", \"6\",… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… CDMConnector::cdmDisconnect(cdm = cdm)"},{"path":"https://ohdsi.github.io/CohortSymmetry/articles/a06_Visualise_temporal_symmetry.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Step 5: Visualise temporal symmetry","text":"vignette explore functionality arguments set functions help us understand visualise temporal symmetry results (produced Step 4: Obtain aggregated data temporal symmetry). particular, delve following function: plotTemporalSymmetry(): plot temporal symmetry. function builds-previous functions, generateSequenceCohortSet() summariseTemporalSymmetry() function. Let’s regather output summariseTemporalSymmetry() established, much like summariseSequenceRatios(), object temporal_symmetry fed tableTemporalSymmetry() plotTemporalSymmetry() visualise results: Note xx axis time, recall initiation marker minus initiation index. unit time difference month default summarisTemporalSymmetry(). end vignette, fun package!","code":"temporal_symmetry <- summariseTemporalSymmetry(cohort = cdm$intersect) tableTemporalSymmetry(result = temporal_symmetry) plotTemporalSymmetry(result = temporal_symmetry) CDMConnector::cdmDisconnect(cdm = cdm)"},{"path":"https://ohdsi.github.io/CohortSymmetry/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Xihang Chen. Author, maintainer. Tyman Stanford. Author. Berta Raventós. Author. Nicole Pratt. Author. Ed Burn. Author. Marti Català. Author. Danielle Newby. Author. Núria Mercadé-Besora. Author. Mike Du. Author. Yuchen Guo. Author. Kim Lopez. Author. Marta Alcalde-Herraiz. Author.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chen X, Stanford T, Raventós B, Pratt N, Burn E, Català M, Newby D, Mercadé-Besora N, Du M, Guo Y, Lopez K, Alcalde-Herraiz M (2025). CohortSymmetry: Sequence Symmetry Analysis Using Observational Medical Outcomes Partnership Common Data Model. R package version 0.2.2, https://ohdsi.github.io/CohortSymmetry/.","code":"@Manual{,   title = {CohortSymmetry: Sequence Symmetry Analysis Using the Observational Medical Outcomes Partnership Common Data Model},   author = {Xihang Chen and Tyman Stanford and Berta Raventós and Nicole Pratt and Ed Burn and Marti Català and Danielle Newby and Núria Mercadé-Besora and Mike Du and Yuchen Guo and Kim Lopez and Marta Alcalde-Herraiz},   year = {2025},   note = {R package version 0.2.2},   url = {https://ohdsi.github.io/CohortSymmetry/}, }"},{"path":"https://ohdsi.github.io/CohortSymmetry/index.html","id":"cohortsymmetry-","dir":"","previous_headings":"","what":"Sequence Symmetry Analysis Using the Observational Medical Outcomes Partnership Common Data Model","title":"Sequence Symmetry Analysis Using the Observational Medical Outcomes Partnership Common Data Model","text":"goal CohortSymmetry carry necessary calculations Sequence Symmetry Analysis (SSA). highly recommended method tested beforehand well-known positive negative controls. controls found using Pratt et al (2015).","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Sequence Symmetry Analysis Using the Observational Medical Outcomes Partnership Common Data Model","text":"can install development version CohortSymmetry GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"OHDSI/CohortSymmetry\")"},{"path":[]},{"path":"https://ohdsi.github.io/CohortSymmetry/index.html","id":"create-a-reference-to-data-in-the-omop-cdm-format","dir":"","previous_headings":"Example","what":"Create a reference to data in the OMOP CDM format","title":"Sequence Symmetry Analysis Using the Observational Medical Outcomes Partnership Common Data Model","text":"CohortSymmetry package designed work data OMOP CDM (Common Data Model) format, first step create reference data using CDMConnector package. example, using Eunomia data set.","code":"library(CDMConnector) library(dplyr) library(DBI) library(duckdb)   db <- DBI::dbConnect(duckdb::duckdb(),                       dbdir = CDMConnector::eunomiaDir()) cdm <- cdmFromCon(   con = db,   cdmSchema = \"main\",   writeSchema = \"main\" )"},{"path":"https://ohdsi.github.io/CohortSymmetry/index.html","id":"step-0-instantiate-two-cohorts-in-the-cdm-reference","dir":"","previous_headings":"Example","what":"Step 0: Instantiate two cohorts in the cdm reference","title":"Sequence Symmetry Analysis Using the Observational Medical Outcomes Partnership Common Data Model","text":"entirely user’s choice generate cohorts. Minimally, package requires two cohort tables cdm reference, namely index_cohort marker_cohort. one wants generate two drugs cohorts cdm, DrugUtilisation recommended. merely illustration purposes, carry PSSA aspirin (index_cohort) amoxicillin (marker_cohort)","code":"library(dplyr) library(DrugUtilisation) cdm <- DrugUtilisation::generateIngredientCohortSet(   cdm = cdm,    name = \"aspirin\",   ingredient = \"aspirin\") #> ℹ Subsetting drug_exposure table #> ℹ Checking whether any record needs to be dropped. #> ℹ Collapsing overlaping records. #> ℹ Collapsing records with gapEra = 1 days.  cdm <- DrugUtilisation::generateIngredientCohortSet(   cdm = cdm,   name = \"amoxicillin\",   ingredient = \"amoxicillin\") #> ℹ Subsetting drug_exposure table #> ℹ Checking whether any record needs to be dropped. #> ℹ Collapsing overlaping records. #> ℹ Collapsing records with gapEra = 1 days."},{"path":"https://ohdsi.github.io/CohortSymmetry/index.html","id":"step-1-generatesequencecohortset","dir":"","previous_headings":"Example","what":"Step 1: generateSequenceCohortSet","title":"Sequence Symmetry Analysis Using the Observational Medical Outcomes Partnership Common Data Model","text":"order initiate calculations, two cohorts tables need intersected using generateSequenceCohortSet(). process output individuals appeared tables according user-specified parameters. includes timeGap, washoutWindow, indexMarkerGap daysPriorObservation. Details parameters found vignette.","code":"library(CohortSymmetry)   cdm <- generateSequenceCohortSet(   cdm = cdm,   indexTable = \"aspirin\",   markerTable = \"amoxicillin\",   name = \"aspirin_amoxicillin\" )  cdm$aspirin_amoxicillin %>%    dplyr::glimpse() #> Rows: ?? #> Columns: 6 #> Database: DuckDB v1.1.3 [xihangc@Windows 10 x64:R 4.2.1/C:\\Users\\xihangc\\AppData\\Local\\Temp\\Rtmpy2oj4K\\file791c79b03ba9.duckdb] #> $ cohort_definition_id <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… #> $ subject_id           <int> 563, 1669, 2141, 3145, 3440, 4052, 4776, 331, 161… #> $ cohort_start_date    <date> 1964-06-11, 1959-12-29, 1950-06-23, 1974-11-14, … #> $ cohort_end_date      <date> 1964-08-16, 1960-02-05, 1950-11-14, 1975-04-06, … #> $ index_date           <date> 1964-06-11, 1959-12-29, 1950-11-14, 1975-04-06, … #> $ marker_date          <date> 1964-08-16, 1960-02-05, 1950-06-23, 1974-11-14, …"},{"path":"https://ohdsi.github.io/CohortSymmetry/index.html","id":"step-2-summarisesequenceratios","dir":"","previous_headings":"Example","what":"Step 2: summariseSequenceRatios","title":"Sequence Symmetry Analysis Using the Observational Medical Outcomes Partnership Common Data Model","text":"get sequence ratios, need output generateSequenceCohortSet() function fed summariseSequenceRatios() output process contains cSR(crude sequence ratio), aSR(adjusted sequence ratio) confidence intervals.","code":"res <- summariseSequenceRatios(cohort = cdm$aspirin_amoxicillin)   res %>% glimpse() #> Rows: 10 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 #> $ cdm_name         <chr> \"An OMOP CDM database\", \"An OMOP CDM database\", \"An O… #> $ group_name       <chr> \"index_cohort_name &&& marker_cohort_name\", \"index_co… #> $ group_level      <chr> \"aspirin &&& amoxicillin\", \"aspirin &&& amoxicillin\",… #> $ strata_name      <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ strata_level     <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ variable_name    <chr> \"crude\", \"adjusted\", \"crude\", \"crude\", \"adjusted\", \"a… #> $ variable_level   <chr> \"sequence_ratio\", \"sequence_ratio\", \"sequence_ratio\",… #> $ estimate_name    <chr> \"point_estimate\", \"point_estimate\", \"lower_CI\", \"uppe… #> $ estimate_type    <chr> \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\"… #> $ estimate_value   <chr> \"1.43589743589744\", \"1629.5148627184\", \"0.95731197561… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"…"},{"path":"https://ohdsi.github.io/CohortSymmetry/index.html","id":"step-3-visualise-the-results","dir":"","previous_headings":"Example","what":"Step 3: visualise the results","title":"Sequence Symmetry Analysis Using the Observational Medical Outcomes Partnership Common Data Model","text":"user visualise results using wide array provided tools. example, following produces gt table. Note flextable also option, users may specify using type argument. One also visualise plot, example, following plot adjusted sequence ratio.  user also freedom plot temporal trend like :","code":"gt_results <- tableSequenceRatios(result = res)  gt_results plotSequenceRatios(result = res,                   onlyaSR = T,                   colours = \"black\") plotTemporalSymmetry(cdm = cdm, sequenceTable = \"aspirin_amoxicillin\")"},{"path":"https://ohdsi.github.io/CohortSymmetry/index.html","id":"disconnect-from-the-cdm-database-connection","dir":"","previous_headings":"Example","what":"Disconnect from the cdm database connection","title":"Sequence Symmetry Analysis Using the Observational Medical Outcomes Partnership Common Data Model","text":"","code":"CDMConnector::cdmDisconnect(cdm = cdm)"},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/CohortSymmetry-package.html","id":null,"dir":"Reference","previous_headings":"","what":"CohortSymmetry: Sequence Symmetry Analysis Using the Observational Medical Outcomes Partnership Common Data Model — CohortSymmetry-package","title":"CohortSymmetry: Sequence Symmetry Analysis Using the Observational Medical Outcomes Partnership Common Data Model — CohortSymmetry-package","text":"Calculating crude sequence ratio, adjusted sequence ratio confidence intervals using data mapped Observational Medical Outcomes Partnership Common Data Model.","code":""},{"path":[]},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/CohortSymmetry-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"CohortSymmetry: Sequence Symmetry Analysis Using the Observational Medical Outcomes Partnership Common Data Model — CohortSymmetry-package","text":"Maintainer: Xihang Chen xihang.chen@ndorms.ox.ac.uk (ORCID) Authors: Tyman Stanford tyman.stanford@unisa.edu.au (ORCID) Berta Raventós braventos@idiapjgol.info (ORCID) Nicole Pratt Nicole.Pratt@unisa.edu.au (ORCID) Ed Burn ed.burn@ndorms.ox.ac.uk (ORCID) Marti Català marti.catalasabate@ndorms.ox.ac.uk (ORCID) Danielle Newby danielle.newby@ndorms.ox.ac.uk (ORCID) Núria Mercadé-Besora nuria.mercadebesora@ndorms.ox.ac.uk (ORCID) Mike Du mike.du@ndorms.ox.ac.uk (ORCID) Yuchen Guo yuchen.guo@ndorms.ox.ac.uk (ORCID) Kim Lopez kim.lopez@spc.ox.ac.uk (ORCID) Marta Alcalde-Herraiz marta.alcaldeherraiz@ndorms.ox.ac.uk (ORCID)","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/generateSequenceCohortSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Intersecting the index and marker cohorts prior to calculating Sequence Symmetry Ratios — generateSequenceCohortSet","title":"Intersecting the index and marker cohorts prior to calculating Sequence Symmetry Ratios — generateSequenceCohortSet","text":"Join two tables CDM (one index marker cohorts) new table cdm taking account maximum time interval events. Index marker cohorts instantiated advance user.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/generateSequenceCohortSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intersecting the index and marker cohorts prior to calculating Sequence Symmetry Ratios — generateSequenceCohortSet","text":"","code":"generateSequenceCohortSet(   cdm,   indexTable,   markerTable,   name,   indexId = NULL,   markerId = NULL,   cohortDateRange = as.Date(c(NA, NA)),   daysPriorObservation = 0,   washoutWindow = 0,   indexMarkerGap = Inf,   combinationWindow = c(0, 365),   movingAverageRestriction = 548 )"},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/generateSequenceCohortSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intersecting the index and marker cohorts prior to calculating Sequence Symmetry Ratios — generateSequenceCohortSet","text":"cdm CDM reference. indexTable table CDM index cohorts come . markerTable table CDM marker cohorts come . name name within cdm output called. Default joined_cohorts. indexId Cohort definition IDs indexTable considered analysis. Change NULL indices wished included. markerId Cohort definition IDs markerTable considered analysis. Change NULL markers wished included. cohortDateRange Two dates indicating study period sequences user wants restrict . daysPriorObservation minimum amount prior observation required index marker cohorts per person. washoutWindow washout window applied index cohort event marker cohort. indexMarkerGap maximum allowable gap end first episode start second episode sequence/combination. combinationWindow constrain placed gap two initiations. Default c(0,365), meaning gap larger 0 less equal 365. movingAverageRestriction moving window calculating nSR, default 548.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/generateSequenceCohortSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Intersecting the index and marker cohorts prior to calculating Sequence Symmetry Ratios — generateSequenceCohortSet","text":"table within cdm reference.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/generateSequenceCohortSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Intersecting the index and marker cohorts prior to calculating Sequence Symmetry Ratios — generateSequenceCohortSet","text":"","code":"# \\donttest{ library(CohortSymmetry) cdm <- mockCohortSymmetry() cdm <- generateSequenceCohortSet(   cdm = cdm,   name = \"joined_cohorts\",   indexTable = \"cohort_1\",   markerTable = \"cohort_2\" )  cdm$joined_cohorts #> # Source:   table<joined_cohorts> [?? x 6] #> # Database: DuckDB v1.2.0 [unknown@Linux 6.8.0-1021-azure:R 4.4.3/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date index_date #>                   <int>      <int> <date>            <date>          <date>     #>  1                    6          2 2022-05-22        2022-05-25      2022-05-22 #>  2                    1          1 2020-04-01        2020-12-30      2020-04-01 #>  3                    8          4 2021-01-01        2021-05-25      2021-01-01 #>  4                    5          2 2022-05-22        2022-05-31      2022-05-22 #>  5                    2          1 2020-04-01        2021-01-01      2020-04-01 #>  6                    9          5 2019-04-07        2020-02-29      2019-04-07 #>  7                    3          1 2019-05-25        2020-04-01      2020-04-01 #>  8                    7          1 2020-12-30        2021-01-01      2021-01-01 #>  9                    2          4 2021-05-25        2021-06-01      2021-06-01 #> 10                    1          3 2009-09-09        2010-01-01      2009-09-09 #> # ℹ more rows #> # ℹ 1 more variable: marker_date <date>  CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/mockCohortSymmetry.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates mock cdm object for testing — mockCohortSymmetry","title":"Creates mock cdm object for testing — mockCohortSymmetry","text":"Creates mock cdm two default synthetic cohorts, one index cohort one marker cohort. However users specify wish.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/mockCohortSymmetry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates mock cdm object for testing — mockCohortSymmetry","text":"","code":"mockCohortSymmetry(   seed = 1,   indexCohort = NULL,   markerCohort = NULL,   con = DBI::dbConnect(duckdb::duckdb(), \":memory:\"),   schema = \"main\" )"},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/mockCohortSymmetry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates mock cdm object for testing — mockCohortSymmetry","text":"seed seed inputted. indexCohort tibble index cohort. Default NULL, means default indexCohort used. markerCohort tibble marker cohort. Default NULL, means default markerCohort used. con Connection detail. schema Name write schema.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/mockCohortSymmetry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates mock cdm object for testing — mockCohortSymmetry","text":"mock cdm object contains index marker cohort","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/mockCohortSymmetry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates mock cdm object for testing — mockCohortSymmetry","text":"","code":"# \\donttest{ library(CohortSymmetry) cdm <- mockCohortSymmetry() cdm #>  #> ── # OMOP CDM reference (duckdb) of mock database ────────────────────────────── #> • omop tables: person, observation_period, cdm_source, concept, vocabulary, #> concept_relationship, concept_synonym, concept_ancestor, drug_strength #> • cohort tables: cohort_1, cohort_2 #> • achilles tables: - #> • other tables: - CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/plotSequenceRatios.html","id":null,"dir":"Reference","previous_headings":"","what":"A plot for the sequence ratios. — plotSequenceRatios","title":"A plot for the sequence ratios. — plotSequenceRatios","text":"provides ggplot sequence ratios index marker cohorts.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/plotSequenceRatios.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A plot for the sequence ratios. — plotSequenceRatios","text":"","code":"plotSequenceRatios(   result,   onlyASR = FALSE,   plotTitle = NULL,   labs = c(\"SR\", \"Drug Pairs\"),   colours = c(\"red\", \"blue\"),   facet = NULL )"},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/plotSequenceRatios.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A plot for the sequence ratios. — plotSequenceRatios","text":"result Table output summariseSequenceRatios. onlyASR set TRUE adjusted SR plotted. Otherwise set FALSE adjusted crude SR plotted. plotTitle Title plot, NULL title included plot. labs Axis labels plot. colours Colours sequence ratio. facet variable facet .","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/plotSequenceRatios.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A plot for the sequence ratios. — plotSequenceRatios","text":"plot sequence ratios index marker cohorts.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/plotSequenceRatios.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A plot for the sequence ratios. — plotSequenceRatios","text":"","code":"# \\donttest{ library(CohortSymmetry) cdm <- mockCohortSymmetry() cdm <- generateSequenceCohortSet(cdm = cdm,                                  indexTable = \"cohort_1\",                                  markerTable = \"cohort_2\",                                  name = \"joined_cohort\") sequence_ratio <- summariseSequenceRatios(cohort = cdm$joined_cohort,                                           minCellCount = 0) #> Warning: For at least some combinations, index is always before marker or marker always #> before index #> -- 5 combinations of 8 had index always before marker #> -- 5 combinations of 8 had marker always before index plotSequenceRatios(result = sequence_ratio) #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_point()`).  CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/plotTemporalSymmetry.html","id":null,"dir":"Reference","previous_headings":"","what":"A plot for the temporal symmetry of cohorts. — plotTemporalSymmetry","title":"A plot for the temporal symmetry of cohorts. — plotTemporalSymmetry","text":"provides ggplot temporal symmetry two cohorts.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/plotTemporalSymmetry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A plot for the temporal symmetry of cohorts. — plotTemporalSymmetry","text":"","code":"plotTemporalSymmetry(   result,   plotTitle = NULL,   labs = c(\"Time (months)\", \"Individuals (N)\"),   xlim = c(-12, 12),   colours = c(\"blue\", \"red\"),   scales = \"free\" )"},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/plotTemporalSymmetry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A plot for the temporal symmetry of cohorts. — plotTemporalSymmetry","text":"result Table output summariseTemporalSymmetry. plotTitle Title plot, NULL title plotted. labs Axis labels plot. xlim Limits x axis plot. colours Colours parts plot, pre- post- time 0. scales Whether set free y scales facet wrap multiple plots (.e. plot scaled y axis) set equal . accepts \"free\" former \"fixed\" latter.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/plotTemporalSymmetry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A plot for the temporal symmetry of cohorts. — plotTemporalSymmetry","text":"plot temporal symmetry cohorts.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/plotTemporalSymmetry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A plot for the temporal symmetry of cohorts. — plotTemporalSymmetry","text":"","code":"# \\donttest{ library(CohortSymmetry) cdm <- mockCohortSymmetry() cdm <- generateSequenceCohortSet(cdm = cdm,                                  indexTable = \"cohort_1\",                                  markerTable = \"cohort_2\",                                  name = \"joined_cohort\") temporal_symmetry <- summariseTemporalSymmetry(cohort = cdm$joined_cohort,                                                minCellCount = 0) plotTemporalSymmetry(result = temporal_symmetry)  CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/summariseSequenceRatios.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequence ratio calculations — summariseSequenceRatios","title":"Sequence ratio calculations — summariseSequenceRatios","text":"Using generateSequenceCohortSet obtain sequence ratios desired outcomes.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/summariseSequenceRatios.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequence ratio calculations — summariseSequenceRatios","text":"","code":"summariseSequenceRatios(   cohort,   cohortId = NULL,   confidenceInterval = 95,   minCellCount = 5 )"},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/summariseSequenceRatios.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequence ratio calculations — summariseSequenceRatios","text":"cohort cohort table cdm. cohortId Ids cohort included analyses. confidenceInterval Default 95, indicating central 95% confidence interval. minCellCount minimum number events reported, results obscured. 0, results reported.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/summariseSequenceRatios.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequence ratio calculations — summariseSequenceRatios","text":"local table analyses.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/summariseSequenceRatios.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequence ratio calculations — summariseSequenceRatios","text":"","code":"# \\donttest{ library(CohortSymmetry) cdm <- mockCohortSymmetry() cdm <- generateSequenceCohortSet(cdm = cdm,                                  name = \"joined_cohorts\",                                  indexTable = \"cohort_1\",                                  markerTable = \"cohort_2\") pssa_result <- summariseSequenceRatios(cohort = cdm$joined_cohorts, minCellCount = 0) #> Warning: For at least some combinations, index is always before marker or marker always #> before index #> -- 5 combinations of 8 had index always before marker #> -- 5 combinations of 8 had marker always before index pssa_result #> # A tibble: 80 × 13 #>    result_id cdm_name      group_name       group_level strata_name strata_level #>        <int> <chr>         <chr>            <chr>       <chr>       <chr>        #>  1         1 mock database index_cohort_na… cohort_1 &… overall     overall      #>  2         1 mock database index_cohort_na… cohort_1 &… overall     overall      #>  3         1 mock database index_cohort_na… cohort_1 &… overall     overall      #>  4         1 mock database index_cohort_na… cohort_1 &… overall     overall      #>  5         1 mock database index_cohort_na… cohort_1 &… overall     overall      #>  6         1 mock database index_cohort_na… cohort_1 &… overall     overall      #>  7         1 mock database index_cohort_na… cohort_1 &… overall     overall      #>  8         1 mock database index_cohort_na… cohort_1 &… overall     overall      #>  9         1 mock database index_cohort_na… cohort_1 &… overall     overall      #> 10         1 mock database index_cohort_na… cohort_1 &… overall     overall      #> # ℹ 70 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr> CDMConnector::cdmDisconnect(cdm) # }"},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/summariseTemporalSymmetry.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise temporal symmetry — summariseTemporalSymmetry","title":"Summarise temporal symmetry — summariseTemporalSymmetry","text":"Using generateSequenceCohortSet obtain temporal symmetry (aggregated counts) two cohorts.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/summariseTemporalSymmetry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise temporal symmetry — summariseTemporalSymmetry","text":"","code":"summariseTemporalSymmetry(   cohort,   cohortId = NULL,   timescale = \"month\",   minCellCount = 5 )"},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/summariseTemporalSymmetry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise temporal symmetry — summariseTemporalSymmetry","text":"cohort cohort table cdm. cohortId Ids cohort included analyses. timescale Timescale x axis plot (month, day, year). minCellCount minimum number events reported, results obscured. 0, results reported.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/summariseTemporalSymmetry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise temporal symmetry — summariseTemporalSymmetry","text":"aggregated table difference time (marker - index) relevant counts.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/summariseTemporalSymmetry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise temporal symmetry — summariseTemporalSymmetry","text":"","code":"# \\donttest{ library(CohortSymmetry) cdm <- mockCohortSymmetry() cdm <- generateSequenceCohortSet(cdm = cdm,                                  name = \"joined_cohorts\",                                  indexTable = \"cohort_1\",                                  markerTable = \"cohort_2\") temporal_symmetry <- summariseTemporalSymmetry(cohort = cdm$joined_cohorts, minCellCount = 0) CDMConnector::cdmDisconnect(cdm) # }"},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/tableSequenceRatios.html","id":null,"dir":"Reference","previous_headings":"","what":"A formatted visualization of sequence_symmetry objects. — tableSequenceRatios","title":"A formatted visualization of sequence_symmetry objects. — tableSequenceRatios","text":"provides formatted table contents summariseSequenceRatios output.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/tableSequenceRatios.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A formatted visualization of sequence_symmetry objects. — tableSequenceRatios","text":"","code":"tableSequenceRatios(   result,   header = \"marker_cohort_name\",   groupColumn = \"cdm_name\",   type = \"gt\",   hide = \"variable_level\" )"},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/tableSequenceRatios.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A formatted visualization of sequence_symmetry objects. — tableSequenceRatios","text":"result sequence_symmetry object. header vector specifying elements include header. See visOmopResults package information use parameter. groupColumn Columns use group labels. See visOmopResults package information use parameter. type desired format output table. hide Columns drop output table.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/tableSequenceRatios.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A formatted visualization of sequence_symmetry objects. — tableSequenceRatios","text":"formatted version sequence_symmetry object.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/tableSequenceRatios.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A formatted visualization of sequence_symmetry objects. — tableSequenceRatios","text":"","code":"# \\donttest{ library(CohortSymmetry) cdm <- mockCohortSymmetry() cdm <- generateSequenceCohortSet(cdm = cdm,                                  indexTable = \"cohort_1\",                                  markerTable = \"cohort_2\",                                  name = \"joined_cohort\") res <- summariseSequenceRatios(cohort = cdm$joined_cohort) #> Warning: For at least some combinations, index is always before marker or marker always #> before index #> -- 5 combinations of 8 had index always before marker #> -- 5 combinations of 8 had marker always before index gtResult <- tableSequenceRatios(res) CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/tableTemporalSymmetry.html","id":null,"dir":"Reference","previous_headings":"","what":"A formatted visualization of temporal_symmetry objects. — tableTemporalSymmetry","title":"A formatted visualization of temporal_symmetry objects. — tableTemporalSymmetry","text":"provides formatted table contents summariseTemporalSymmetry output.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/tableTemporalSymmetry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A formatted visualization of temporal_symmetry objects. — tableTemporalSymmetry","text":"","code":"tableTemporalSymmetry(   result,   header = \"variable_level\",   groupColumn = c(\"cdm_name\", \"index_name\"),   type = \"gt\",   hide = \"variable_name\" )"},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/tableTemporalSymmetry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A formatted visualization of temporal_symmetry objects. — tableTemporalSymmetry","text":"result temporal_symmetry object. header vector specifying elements include header. See visOmopResults package information use parameter. groupColumn Columns use group labels. See visOmopResults package information use parameter. type desired format output table. hide Columns drop output table.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/tableTemporalSymmetry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A formatted visualization of temporal_symmetry objects. — tableTemporalSymmetry","text":"formatted version temporal_symmetry object.","code":""},{"path":"https://ohdsi.github.io/CohortSymmetry/reference/tableTemporalSymmetry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A formatted visualization of temporal_symmetry objects. — tableTemporalSymmetry","text":"","code":"# \\donttest{ library(CohortSymmetry) cdm <- mockCohortSymmetry() cdm <- generateSequenceCohortSet(cdm = cdm,                                  indexTable = \"cohort_1\",                                  markerTable = \"cohort_2\",                                  name = \"joined_cohort\") res <- summariseTemporalSymmetry(cohort = cdm$joined_cohort, minCellCount = 0) gtResult <- tableTemporalSymmetry(result = res) CDMConnector::cdmDisconnect(cdm = cdm) # }"}]
