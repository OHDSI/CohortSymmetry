cdm = cdm,
indexTable = "index_cohort",
markerTable = "marker_cohort",
name = "index_marker"
)
CohortSymmetry::generateSequenceCohortSet()
library(CohortSymmetry)
devtools::load_all()
cdm <- emptyCdmReference(cdmName = "mock") |>
mockPerson(nPerson = 1000) |>
mockObservationPeriod() |>
mockCohort(
tableName = "mock_cohorts",
numberCohorts = 2,
cohortName = c("index_cohort", "marker_cohort")
)
settings(cdm$mock_cohorts)
cdm
cdm
cdm <- emptyCdmReference(cdmName = "mock") |>
mockPerson(nPerson = 1000) |>
mockObservationPeriod() |>
mockCohort(
tableName = "index_cohort",
numberCohorts = 1,
cohortName = c("index_cohort")
) |>
mockCohort(
tableName = "marker_cohort",
numberCohorts = 1,
cohortName = c("marker_cohort")
)
cdm
cdm
cdm <- generateSequenceCohortSet(
cdm = cdm,
indexTable = "index_cohort",
markerTable = "marker_cohort",
name = "index_marker"
)
generateSequenceCohortSet(
cdm = cdm,
indexTable = "index_cohort",
markerTable = "marker_cohort",
name = "index_marker"
)
generateSequenceCohortSet()
generateSequenceCohortSet()cdm
generateSequenceCohortSet(cdm)
generateSequenceCohortSet(cdm, indexTable = "index_cohort"
)
generateSequenceCohortSet(cdm, indexTable = "index_cohort", markerTable = "marker_cohort")
generateSequenceCohortSet(cdm, indexTable = "index_cohort", markerTable = "marker_cohort", name = "a")
devtools::check()
renv::activate()
install.package("renv")
install.packages("renv")
renv::check()
devtools::check()
install.packages("reprex")
install.packages("renv")
install.packages("renv")
renv::update()
file.edit(".gitignore")
file.edit(".gitignore")
library(CDMConnector)
library(dplyr)
library(DBI)
library(omock)
library(CohortSymmetry)
cdm <- emptyCdmReference(cdmName = "mock") |>
mockPerson(nPerson = 1000) |>
mockObservationPeriod() |>
mockCohort(
tableName = "index_cohort",
numberCohorts = 1,
cohortName = c("index_cohort")
) |>
mockCohort(
tableName = "marker_cohort",
numberCohorts = 1,
cohortName = c("marker_cohort")
)
cdm
cdm
library(duck)
library(duckdb)
cdm <- CDMConnector::copyCdmTo(con = con, cdm = cdm, schema = "main")
cdm <- emptyCdmReference(cdmName = "mock") |>
mockPerson(nPerson = 1000) |>
mockObservationPeriod() |>
mockCohort(
tableName = "index_cohort",
numberCohorts = 1,
cohortName = c("index_cohort")
) |>
mockCohort(
tableName = "marker_cohort",
numberCohorts = 1,
cohortName = c("marker_cohort")
)
cdm <- emptyCdmReference(cdmName = "mock") |>
mockPerson(nPerson = 1000) |>
mockObservationPeriod() |>
mockCohort(
tableName = "index_cohort",
numberCohorts = 1,
cohortName = c("index_cohort")
) |>
mockCohort(
tableName = "marker_cohort",
numberCohorts = 1,
cohortName = c("marker_cohort")
)
con <- DBI::dbConnect(duckdb::duckdb())
cdm <- CDMConnector::copyCdmTo(con = con, cdm = cdm, schema = "main")
cdm
xsm
cdm
cdm <- generateSequenceCohortSet(
cdm = cdm,
indexTable = "index_cohort",
markerTable = "marker_cohort",
name = "index_marker"
)
cdm$index_marker |> glimpse()
cdm$index_marker |> glimpse()
cdm$index_marker
cdm$index_marker
cdm <- emptyCdmReference(cdmName = "mock") |>
mockPerson(nPerson = 10000) |>
mockObservationPeriod() |>
mockCohort(
tableName = "index_cohort",
numberCohorts = 1,
cohortName = c("index_cohort")
) |>
mockCohort(
tableName = "marker_cohort",
numberCohorts = 1,
cohortName = c("marker_cohort")
)
cdm <- emptyCdmReference(cdmName = "mock") |>
mockPerson(nPerson = 10000) |>
mockObservationPeriod() |>
mockCohort(
tableName = "index_cohort",
numberCohorts = 1,
cohortName = c("index_cohort")
) |>
mockCohort(
tableName = "marker_cohort",
numberCohorts = 1,
cohortName = c("marker_cohort")
)
con <- dbConnect(duckdb::duckdb())
cdm <- copyCdmTo(con = con, cdm = cdm, schema = "main")
cdm
cdm <- generateSequenceCohortSet(
cdm = cdm,
indexTable = "index_cohort",
markerTable = "marker_cohort",
name = "index_marker"
)
cdm$index_marker
cdm <- emptyCdmReference(cdmName = "mock") |>
mockPerson(nPerson = 100) |>
mockObservationPeriod() |>
mockCohort(
tableName = "index_cohort",
numberCohorts = 1,
cohortName = c("index_cohort"),
seed = 1,
) |>
mockCohort(
tableName = "marker_cohort",
numberCohorts = 1,
cohortName = c("marker_cohort"),
seed = 1
)
cdm
cdmcdm$index_cohort
cdm$index_cohort
cdm$marker_cohort
cdm <- emptyCdmReference(cdmName = "mock") |>
mockPerson(nPerson = 100) |>
mockObservationPeriod() |>
mockCohort(
tableName = "index_cohort",
numberCohorts = 1,
cohortName = c("index_cohort"),
seed = 1,
) |>
mockCohort(
tableName = "marker_cohort",
numberCohorts = 1,
cohortName = c("marker_cohort"),
seed = 2
)
con <- dbConnect(duckdb::duckdb())
cdm <- copyCdmTo(con = con, cdm = cdm, schema = "main")
cdm
cdm <- emptyCdmReference(cdmName = "mock") |>
mockPerson(nPerson = 100) |>
mockObservationPeriod() |>
mockCohort(
tableName = "index_cohort",
numberCohorts = 1,
cohortName = c("index_cohort"),
seed = 1,
) |>
mockCohort(
tableName = "marker_cohort",
numberCohorts = 1,
cohortName = c("marker_cohort"),
seed = 2
)
con <- dbConnect(duckdb::duckdb())
cdm <- copyCdmTo(con = con, cdm = cdm, schema = "main")
cdm
cdm
cdm$index_cohort
cdm$marker_cohort
cdm <- generateSequenceCohortSet(
cdm = cdm,
indexTable = "index_cohort",
markerTable = "marker_cohort",
name = "index_marker"
)
cdm$index_marker
cdm <- generateSequenceCohortSet(
cdm = cdm,
indexTable = "index_cohort",
markerTable = "marker_cohort",
name = "index_marker"
)
cdm$index_marker |> glimpse()
settings(cdm$index_marker)
cdm$index_marker |> glimpse()
cdm <- generateSequenceCohortSet(
cdm = cdm,
indexTable = "index_cohort",
markerTable = "marker_cohort",
name = "hola"
)
cdm
settings(cdm$hola)
cdm <- generateSequenceCohortSet(
cdm = cdm,
indexTable = "index_cohort",
markerTable = "marker_cohort",
name = "intersect"
)
cdm$intersect |> glimpse()
```
cdm <- generateSequenceCohortSet(
cdm = cdm,
indexTable = "index_cohort",
markerTable = "marker_cohort",
name = "intersect"
)
cdm$intersect
cdm$index_cohort
cdm$marker_cohort
settings(cdm$intersect)
settings(cdm$intersect)
summariseSequenceRatio(cdm = cdm,
sequenceTable = "sequence_ratios")
summariseSequenceRatio(cdm = cdm,
sequenceTable = "intersect")
result
result <- summariseSequenceRatio(cdm = cdm,
sequenceTable = "intersect")
result
tableSequenceRatios(result)
class(tableSequenceRatios(result))
tableSequenceRatios(result)
help("plotSequenceRatio")
plotSequenceRatio(cdm = cdm,
joinedTable = "intersect",
sequenceRatio = result)
plotSequenceRatio(cdm = cdm,
joinedTable = "intersect",
sequenceRatio = result,
onlyaSR = T)
plotSequenceRatio(cdm = cdm,
joinedTable = "intersect",
sequenceRatio = result,
onlyaSR = FALSE)
plotTemporalSymmetry(cdm = cdm,
joinedTable = "results")
plotTemporalSymmetry(cdm = cdm,
joinedTable = "result")
plotTemporalSymmetry(cdm = cdm,
joinedTable = "intersect")
plotSequenceRatio(cdm = cdm,
joinedTable = "intersect",
sequenceRatio = result,
onlyaSR = T,
color = "black")
plotSequenceRatio(cdm = cdm,
joinedTable = "intersect",
sequenceRatio = result,
onlyaSR = T,
colour = "black")
devtools::load_all()
devtools::check()
usethis::use_vignette("a02_Generate_a_sequence_cohort_set")
cdm <- emptyCdmReference(cdmName = "mock") |>
mockPerson(nPerson = 100) |>
mockObservationPeriod()
cdm <- DrugUtilisation::generateIngredientCohortSet(
cdm = cdm,
name = "aspirin",
ingredient = "aspirin")
library(CDMConnector)
library(dplyr)
library(DBI)
library(omock)
library(CohortSymmetry)
library(duckdb)
cdm <- emptyCdmReference(cdmName = "mock") |>
mockPerson(nPerson = 100) |>
mockObservationPeriod()
cdm <- DrugUtilisation::generateIngredientCohortSet(
cdm = cdm,
name = "aspirin",
ingredient = "aspirin")
library(CDMConnector)
library(dplyr)
library(DBI)
library(omock)
library(CohortSymmetry)
library(duckdb)
db <- DBI::dbConnect(duckdb::duckdb(),
dbdir = CDMConnector::eunomia_dir())
cdm <- cdm_from_con(
con = db,
cdm_schema = "main",
write_schema = "main"
)
help("generateSequenceCohortSet")
CDMConnector::eunomia_dir()
CDMConnector::eunomia_dir()
eunomia_dir()
usethis::edit_r_environ()
db <- DBI::dbConnect(duckdb::duckdb(),
dbdir = CDMConnector::eunomia_dir())
db <- DBI::dbConnect(duckdb::duckdb(),
dbdir = CDMConnector::eunomia_dir())
db
DBI::dbConnect(duckdb::duckdb(),
dbdir = CDMConnector::eunomia_data_dir())
usethis::edit_r_environ()
db <- DBI::dbConnect(duckdb::duckdb(),
dbdir = CDMConnector::eunomia_data_folder())
db <- DBI::dbConnect(duckdb::duckdb(),
dbdir = CDMConnector::eunomia_dir())
library(CDMConnector)
library(dplyr)
library(DBI)
library(omock)
library(CohortSymmetry)
library(duckdb)
db <- DBI::dbConnect(duckdb::duckdb(),
dbdir = CDMConnector::eunomia_dir())
db
db
library(CDMConnector)
library(dplyr)
library(DBI)
library(omock)
library(CohortSymmetry)
library(duckdb)
# db <- DBI::dbConnect(duckdb::duckdb(),
#                      dbdir = CDMConnector::eunomia_dir())
# cdm <- cdm_from_con(
#   con = db,
#   cdm_schema = "main",
#   write_schema = "main"
# )
con <- DBI::dbConnect(duckdb::duckdb(), eunomia_dir())
library(CDMConnector)
library(dplyr)
library(DBI)
library(omock)
library(CohortSymmetry)
library(duckdb)
con <- DBI::dbConnect(duckdb::duckdb(), eunomia_dir())
cdm <- CDMConnector::cdm_from_con(
con = con,
cdm_schema = "main",
write_schema = "main"
)
db
cdm
cdm$vocabulary
cdm$vocabulary |> print(n = 100)
cdm
cdm$concept
cdm$concept |> filter(concept_class_id == "Ingredient")
cdm$concept |> filter(concept_class_id == "Ingredient") |> print(n = 100)
library(DrugUtilisation)
cdm <- DrugUtilisation::generateIngredientCohortSet(
cdm = cdm,
name = "aspirin",
ingredient = "aspirin")
cdm <- DrugUtilisation::generateIngredientCohortSet(
cdm = cdm,
name = "acetaminophen",
ingredient = "acetaminophen")
library(CDMConnector)
library(dplyr)
library(DBI)
library(omock)
library(CohortSymmetry)
library(duckdb)
con <- DBI::dbConnect(duckdb::duckdb(), eunomia_dir())
cdm <- CDMConnector::cdm_from_con(
con = con,
cdm_schema = "main",
write_schema = "main"
)
library(CDMConnector)
library(dplyr)
library(DBI)
library(omock)
library(CohortSymmetry)
library(duckdb)
con <- DBI::dbConnect(duckdb::duckdb(), eunomia_dir())
cdm <- CDMConnector::cdm_from_con(
con = con,
cdm_schema = "main",
write_schema = "main"
)
cdm
help(eunomia_dir)
library(CDMConnector)
library(dplyr)
library(DBI)
library(omock)
library(CohortSymmetry)
library(duckdb)
con <- DBI::dbConnect(duckdb::duckdb(), CDMConnector::eunomia_dir())
cdm <- CDMConnector::cdm_from_con(
con = con,
cdm_schema = "main",
write_schema = "main"
)
library(CDMConnector)
library(dplyr)
library(DBI)
library(omock)
library(CohortSymmetry)
library(duckdb)
con <- DBI::dbConnect(duckdb::duckdb(), CDMConnector::eunomia_dir())
cdm <- CDMConnector::cdm_from_con(
con = con,
cdm_schema = "main",
write_schema = "main"
)
library(CDMConnector)
library(dplyr)
library(DBI)
library(omock)
library(CohortSymmetry)
library(duckdb)
con <- DBI::dbConnect(duckdb::duckdb(), CDMConnector::eunomia_dir())
cdm <- CDMConnector::cdm_from_con(
con = con,
cdm_schema = "main",
write_schema = "main"
)
library(CDMConnector)
library(dplyr)
library(DBI)
library(omock)
library(CohortSymmetry)
library(duckdb)
con <- DBI::dbConnect(duckdb::duckdb(), CDMConnector::eunomia_dir())
cdm <- CDMConnector::cdm_from_con(
con = con,
cdm_schema = "main",
write_schema = "main"
)
library(DrugUtilisation)
cdm <- DrugUtilisation::generateIngredientCohortSet(
cdm = cdm,
name = "aspirin",
ingredient = "aspirin")
cdm <- DrugUtilisation::generateIngredientCohortSet(
cdm = cdm,
name = "acetaminophen",
ingredient = "acetaminophen")
help("generateSequenceCohortSet")
cdm
cdm <- generateSequenceCohortSet(
cdm = cdm,
indexTable = "aspirin",
markerTable = "acetaminophen",
name = "intercept",
combinationWindow = c(0, Inf))
cdm$intercept
plotTemporalSymmetry(cdm, joinedTable = "intercept")
cdm <- generateSequenceCohortSet(
cdm = cdm,
indexTable = "aspirin",
markerTable = "acetaminophen",
name = "intercept",
cohortDateRange = as.Date(c("2010-01-01","2020-01-01")),
combinationWindow = c(0, Inf))
cdm$intercept
